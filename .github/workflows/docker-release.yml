name: Release Assets

on:
  workflow_dispatch:
  # Workflow runs when a release is created in GitHub
  release:
    types: [published]

env:
  IMAGE_REG: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  packages: write
  contents: write

jobs:
  ci-build:
    name: Code Check & CI build
    runs-on: ubuntu-latest

    steps:
      # Checkout code from repo
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      # Ensures Go is configured properly
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      # Ensures Node is configured properly
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          check-latest: true

      # Build static content
      - name: NPM Install
        uses: bahmutov/npm-install@v1
        with:
          working-directory: web/client


      - name: NPM Build
        working-directory: web/client
        run: |
          npx vue-cli-service build
          cp -ax dist ../../cmd/server/kodata
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"
          NODE_ENV: production


      - name: Install ko
        uses: ko-build/setup-ko@v0.6


      - name: Run ko
        run: ko build --bare --tags latest --tags ${{ github.event.release.tag_name }} ./cmd/server
        env:
          KO_DOCKER_REPO: ${{ env.IMAGE_REG }}/${{ env.IMAGE_NAME }}
          KO_DEFAULTPLATFORMS: all
          GOFLAGS: "-ldflags=-X=main.version=${{ github.event.release.tag_name }}"
          
      # Cleanup
      - name: Cleanup output directories
        run: rm -rf cmd/server/kodata web/client/dist
      
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        # with:
        #   charts_dir: charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # # Package chart as tgz file
      # - name: Package Helm chart
      #   run: helm package kubeview
      #   working-directory: ./charts

      # # Update the index
      # - name: Update chart index
      #   run: helm repo index .
      #   working-directory: ./charts

      # # Push updated index and packaged tgz back into git repo
      # - name: Update repo with output
      #   uses: mikeal/publish-to-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     BRANCH_NAME: 'main'

      # # Also attach the packaged tgz to the release in GitHub
      # - name: Upload Helm chart to release
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_path: ./charts/kubeview-${{ github.event.release.tag_name }}.tgz
      #     asset_name: kubeview-${{ github.event.release.tag_name }}.tgz
      #     asset_content_type: application/octet-stream
